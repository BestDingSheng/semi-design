{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/show/collapsible","result":{"data":{"current":{"frontmatter":{"title":"Collapsible","order":46,"brief":"The collapsible component is a container component used to put long sections of information under a block that can be expanded or collapsed.","icon":"doc-collapsible"},"fields":{"type":"show"},"tableOfContents":{"items":[{"url":"#when-to-use","title":"When to use"},{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#custom-animation-duration","title":"Custom Animation Duration"},{"url":"#nested-use","title":"Nested use"},{"url":"#custom-collapseheight","title":"Custom CollapseHeight"}]},{"url":"#api-reference","title":"API reference"},{"url":"#faq","title":"FAQ"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 46,\n  \"category\": \"Show\",\n  \"title\": \"Collapsible\",\n  \"subTitle\": \"Collapsible\",\n  \"icon\": \"doc-collapsible\",\n  \"brief\": \"The collapsible component is a container component used to put long sections of information under a block that can be expanded or collapsed.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"When to use\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Collapsible\"), \"is a behavior component with animation effect by default. It is used in various components in Semi Components, including: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Navigation\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Collapse\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Tree\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TreeSelect\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Typography\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the above components do not meet requirements or customized collapsed behavior, you can use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Collapsible\"), \" to put in contents that need to be expanded or folded.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"import\",\n    \"import\": true\n  }, \"import { Collapsible } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Usage\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" to control the expansion or folding of the content.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\\n\\nclass Demo extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            isOpen: false,\\n        };\\n        this.toggle = this.toggle.bind(this);\\n    }\\n\\n    toggle() {\\n        this.setState({ isOpen: !this.state.isOpen });\\n    }\\n\\n    render() {\\n        const { isOpen } = this.state;\\n        const collapsed = (\\n            <div>\\n                <p>Nothing can ever happen twice.</p>\\n                <p>In consequence, the sorry fact is</p>\\n                <p>that we arrive here improvised</p>\\n                <p>and leave without the chance to practice. </p>\\n            </div>\\n        );\\n        return (\\n            <div>\\n                <Button onClick={this.toggle}>Toggle</Button>\\n                <Collapsible isOpen={isOpen}>{collapsed}</Collapsible>\\n            </div>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Animation Duration\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"duration\"), \" to set animation duration or turn off animation by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"motion={false}\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Collapsible, InputNumber, Button } from '@douyinfe/semi-ui';\\n\\nclass Demo extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            isOpen: false,\\n            duration: 250,\\n        };\\n        this.toggle = this.toggle.bind(this);\\n        this.setDuration = this.setDuration.bind(this);\\n    }\\n\\n    toggle() {\\n        this.setState({ isOpen: !this.state.isOpen });\\n    }\\n\\n    setDuration(duration) {\\n        this.setState({ duration: duration });\\n    }\\n\\n    render() {\\n        const { isOpen, duration } = this.state;\\n        const collapsed = (\\n            <div>\\n                <p>Nothing can ever happen twice.</p>\\n                <p>In consequence, the sorry fact is</p>\\n                <p>that we arrive here improvised</p>\\n                <p>and leave without the chance to practice. </p>\\n            </div>\\n        );\\n        return (\\n            <div>\\n                <label>Set animation duration\\uFF1A</label>\\n                <InputNumber min={0} defaultValue={250} style={{ width: 120 }} onChange={this.setDuration} step={10} />\\n                <br />\\n                <Button onClick={this.toggle}>Toggle</Button>\\n                <Collapsible isOpen={isOpen} duration={duration}>\\n                    {collapsed}\\n                </Collapsible>\\n            </div>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Nested use\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When nesting uses Collapsible, you need to set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"motion={true}\"), \" for the nodes that currently trigger the animation and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"motion={false}\"), \" for the nodes that do not trigger the animation.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In versions after v0.29.2, we have improved the performance of Collapsible so you do not need to set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"motion\"), \" to nodes yourself.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For versions < v0.29.2, you need to write in this way:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\\n\\nclass Demo extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            isOpen: false,\\n            isChildOpen: false,\\n            activeKey: '',\\n        };\\n        this.toggle = this.toggle.bind(this);\\n        this.toggleChild = this.toggleChild.bind(this);\\n    }\\n\\n    toggle() {\\n        this.setState({\\n            isOpen: !this.state.isOpen,\\n            activeKey: 'p',\\n        });\\n    }\\n\\n    toggleChild() {\\n        this.setState({\\n            isChildOpen: !this.state.isChildOpen,\\n            activeKey: 'c',\\n        });\\n    }\\n\\n    render() {\\n        const { isOpen, isChildOpen, activeKey } = this.state;\\n        const collapsed = (\\n            <div>\\n                <p>Nothing can ever happen twice.</p>\\n                <p>In consequence, the sorry fact is</p>\\n                <p>that we arrive here improvised</p>\\n                <p>and leave without the chance to practice. </p>\\n            </div>\\n        );\\n        return (\\n            <div>\\n                <Button onClick={this.toggle}>Toggle</Button>\\n                <br />\\n                <Collapsible isOpen={isOpen} motion={'p' === activeKey}>\\n                    <div>\\n                        Nothing Twice<Button onClick={this.toggleChild}>Toggle Lines</Button>\\n                    </div>\\n                    <Collapsible isOpen={isChildOpen} motion={'c' === activeKey}>\\n                        {collapsed}\\n                    </Collapsible>\\n                </Collapsible>\\n            </div>\\n        );\\n    }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For >= v0.29.2:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\\n\\nclass Demo extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            isOpen: false,\\n            isChildOpen: false,\\n        };\\n        this.toggle = this.toggle.bind(this);\\n        this.toggleChild = this.toggleChild.bind(this);\\n    }\\n\\n    toggle() {\\n        this.setState({ isOpen: !this.state.isOpen });\\n    }\\n\\n    toggleChild() {\\n        this.setState({ isChildOpen: !this.state.isChildOpen });\\n    }\\n\\n    render() {\\n        const { isOpen, isChildOpen } = this.state;\\n        const collapsed = (\\n            <div>\\n                <p>Nothing can ever happen twice.</p>\\n                <p>In consequence, the sorry fact is</p>\\n                <p>that we arrive here improvised</p>\\n                <p>and leave without the chance to practice. </p>\\n            </div>\\n        );\\n        return (\\n            <div>\\n                <Button onClick={this.toggle}>Toggle</Button>\\n                <br />\\n                <Collapsible isOpen={isOpen}>\\n                    <div>\\n                        Nothing Twice<Button onClick={this.toggleChild}>Toggle Lines</Button>\\n                    </div>\\n                    <Collapsible isOpen={isChildOpen}>{collapsed}</Collapsible>\\n                </Collapsible>\\n            </div>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom CollapseHeight\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"collapseHeight\"), \" to customize collapsed height. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"v>=1.0.0\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\\n\\nclass Demo extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            isOpen: false,\\n        };\\n        this.toggle = this.toggle.bind(this);\\n    }\\n\\n    toggle() {\\n        this.setState({ isOpen: !this.state.isOpen });\\n    }\\n\\n    render() {\\n        const { isOpen } = this.state;\\n        const maskStyle = isOpen\\n            ? {}\\n            : {\\n                  WebkitMaskImage:\\n                      'linear-gradient(to bottom, black 0%, rgba(0, 0, 0, 1) 60%, rgba(0, 0, 0, 0.2) 80%, transparent 100%)',\\n              };\\n        const collapsed = (\\n            <div>\\n                <p>Nothing can ever happen twice.</p>\\n                <p>In consequence, the sorry fact is</p>\\n                <p>that we arrive here improvised</p>\\n                <p>and leave without the chance to practice. </p>\\n            </div>\\n        );\\n        const linkStyle = {\\n            position: 'absolute',\\n            left: 0,\\n            right: 0,\\n            textAlign: 'center',\\n            bottom: -10,\\n            fontWeight: 700,\\n            cursor: 'pointer',\\n        };\\n        return (\\n            <>\\n                <Button onClick={this.toggle}>Toggle</Button>\\n                <div style={{ position: 'relative' }}>\\n                    <Collapsible isOpen={isOpen} collapseHeight={80} style={{ ...maskStyle }}>\\n                        {collapsed}\\n                    </Collapsible>\\n                    {isOpen ? null : (\\n                        <a onClick={this.toggle} style={{ ...linkStyle }}>\\n                            + Show More\\n                        </a>\\n                    )}\\n                </div>\\n            </>\\n        );\\n    }\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API reference\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"version\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Class name\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.34.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"collapseHeight\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Collapse height\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.0.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"duration\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Time of animation execution\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"250\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"isOpen\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to expand the content area\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"keepDOM\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to keep the hidden panel in DOM tree, destroyed by default\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"motion\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to turn on animation\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Motion\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"reCalcKey\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"When reCalcKey changes, the height of children will be reset. Used for optimize dynamic content rendering.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.5.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Style object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.34.0\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"FAQ\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Why Collapsible does not expand as expected?\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"Check if the display of parent item of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Collapsible\"), \" once was set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"none\"), \". In this case, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Collapsible\"), \" could not get height of node properly. If this is not the issue, contact Semi developers to see if other issues exist.\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/show/collapsible","next":{"fields":{"slug":"zh-CN/show/collapsible"},"id":"523b3c07-5a2d-5efd-b0c8-d3083633d3e7","frontmatter":{"title":"Collapsible 折叠","localeCode":"zh-CN","icon":"doc-collapsible"}},"previous":{"fields":{"slug":"zh-CN/show/collapse"},"id":"3fca78c9-8756-57cd-90dd-12d4b81bd0cc","frontmatter":{"title":"Collapse 折叠面板","localeCode":"zh-CN","icon":"doc-accordion"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}