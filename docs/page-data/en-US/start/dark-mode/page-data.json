{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/start/dark-mode","result":{"data":{"current":{"frontmatter":{"title":"Dark Mode","order":4,"brief":null,"icon":"doc-darkmode"},"fields":{"type":"start"},"tableOfContents":{"items":[{"url":"#dark-mode","title":"Dark mode"},{"url":"#how-to-switch","title":"How to switch"},{"url":"#keep-consistency-with-system-theme","title":"Keep Consistency with System Theme"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"category\": \"Getting Started\",\n  \"title\": \"Dark Mode\",\n  \"subTitle\": \"Dark Mode\",\n  \"icon\": \"doc-darkmode\",\n  \"localeCode\": \"en-US\",\n  \"order\": 4\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Dark mode\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Semi's default theme and custom themes configured through Theme Store come with both light and dark modes, which can be easily switched. \")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"How to switch\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To use Dark Mode, you could simply add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[theme-mode='dark']\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \" in any way you prefer. Here is a quick idea:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const body = document.body;\\nif (body.hasAttribute('theme-mode')) {\\n    body.removeAttribute('theme-mode');\\n} else {\\n    body.setAttribute('theme-mode', 'dark');\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For instance:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Button } from '@douyinfe/semi-ui';\\n\\nclass Demo extends React.Component {\\n    constructor() {\\n        super();\\n    }\\n\\n    switchMode() {\\n        const body = document.body;\\n        if (body.hasAttribute('theme-mode')) {\\n            body.removeAttribute('theme-mode');\\n           // Notify our site to update current mode\\n            window.setMode('light');\\n        } else {\\n            body.setAttribute('theme-mode', 'dark');\\n            // Notify our site to update current mode\\n            window.setMode('dark');\\n        }\\n    }\\n\\n    render() {\\n        return (\\n            <Button\\n                onClick={this.switchMode}\\n            >\\n                Switch Mode\\n            </Button>\\n        );\\n    }\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Keep Consistency with System Theme\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you want the mode of the site to change with the system setting, you may find this property  \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\"\n  }, \"Prefers-color-scheme\\n\"), \" helpful. Please pay attention that this property is experimental. It asks for browser compatibility (Chrome >= 76, Safari >= 12.1) and you may expect behavior to change in the future.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To change system setting in macOS, go to System Preferences -> General -> Appearance\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Since we do not recommend modifying the content of the npm theme package directly, you could add a listener for this property using js. Here is another example:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const mql = window.matchMedia('(prefers-color-scheme: dark)');\\n\\nfunction matchMode(e) {\\n    const body = document.body;\\n    if (e.matches) {\\n        if (!body.hasAttribute('theme-mode')) {\\n            body.setAttribute('theme-mode', 'dark');\\n        }\\n    } else {\\n        if (body.hasAttribute('theme-mode')) {\\n            body.removeAttribute('theme-mode');\\n        }\\n    }\\n}\\n\\nmql.addListener(matchMode);\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/start/dark-mode","next":{"fields":{"slug":"zh-CN/start/dark-mode"},"id":"d36c748c-b1ed-5b00-b4a8-b35cc5816081","frontmatter":{"title":"Dark Mode 暗色模式","localeCode":"zh-CN","icon":"doc-darkmode"}},"previous":{"fields":{"slug":"zh-CN/start/customize-theme"},"id":"b9d8823c-c6af-51e8-abbd-9460c8c9326f","frontmatter":{"title":"Customized Themes 定制主题","localeCode":"zh-CN","icon":"doc-theme"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}